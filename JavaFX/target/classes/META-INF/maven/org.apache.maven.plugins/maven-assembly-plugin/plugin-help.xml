<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2014-07-30 -->

<plugin>
  <name>Apache Maven Assembly Plugin</name>
  <description>A Maven plugin to create archives of your project&apos;s sources, classes, dependencies etc. from flexible assembly descriptors.</description>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-assembly-plugin</artifactId>
  <version>2.4.1</version>
  <goalPrefix>assembly</goalPrefix>
  <mojos>
    <mojo>
      <goal>assembly</goal>
      <description>Assemble an application bundle or distribution using an assembly descriptor from the command line. This goal will force Maven to build all included POMs up to the package phase BEFORE the assembly is processed.
NOTE: This goal should ONLY be run from the command line, and if building a multimodule project it should be used from the root POM. Use the assembly:single goal for binding your assembly to the lifecycle.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>false</inheritedByDefault>
      <executePhase>package</executePhase>
      <implementation>org.apache.maven.plugin.assembly.mojos.AssemblyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use assembly:single instead! The assembly:assembly mojo leads to non-standard builds.</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>appendAssemblyId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to false to exclude the assembly id from the assembly final name.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is a set of instructions to the archive builder, especially for building .jar files. It enables you to specify a Manifest file for the jar, in addition to other options. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>archiveBaseDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is the base directory from which archive files are created. This base directory pre-pended to any &lt;directory&gt; specifications in the assembly descriptor. This is an optional parameter.</description>
        </parameter>
        <parameter>
          <name>archiverConfig</name>
          <type>org.codehaus.plexus.configuration.PlexusConfiguration</type>
          <since>2.2-beta-3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows additional configuration options that are specific to a particular type of archive format. This is intended to capture an XML configuration that will be used to reflectively setup the options on the archiver instance.
For instance, to direct an assembly with the &apos;ear&apos; format to use a particular deployment descriptor, you should specify the following for the archiverConfig value in your plugin configuration:

&lt;appxml&gt;${project.basedir}/somepath/app.xml&lt;/appxml&gt;
</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>2.2-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Controls whether the assembly plugin tries to attach the resulting assembly to the project.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <deprecated>Please use the Assembly&apos;s id for classifier instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This is the artifact classifier to be used for the resultant assembly artifact. Normally, you would use the assembly-id instead of specifying this here.</description>
        </parameter>
        <parameter>
          <name>descriptor</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptors instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Assembly XML Descriptor file. This must be the path to your customized descriptor file.</description>
        </parameter>
        <parameter>
          <name>descriptorId</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptorRefs instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Predefined Assembly Descriptor Id&apos;s. You can select bin, jar-with-dependencies, or src.</description>
        </parameter>
        <parameter>
          <name>descriptorRefs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of references to assembly descriptors available on the plugin&apos;s classpath. The default classpath includes these built-in descriptors: bin, jar-with-dependencies, src, and project. You can add others by adding dependencies to the plugin.</description>
        </parameter>
        <parameter>
          <name>descriptors</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of descriptor files to generate from.</description>
        </parameter>
        <parameter>
          <name>descriptorSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to scan for descriptor files in. NOTE: This may not work correctly with assembly components.</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, everything up to the call to Archiver.createArchive() will be executed.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expressions preceded with this String won&apos;t be interpolated. If you use &apos;\&apos; as the escape string then \${foo} will be replaced with ${foo}.</description>
        </parameter>
        <parameter>
          <name>executedProject</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>false</required>
          <editable>true</editable>
          <description>Get the executed project from the forked lifecycle.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties, project properties, and filter properties files specified in the POM build/filters section, which should be used for the filtering during the current mojo execution.
Normally, these will be configured from a plugin&apos;s execution section, to provide a different set of filters for a particular execution.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The filename of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>formats</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the formats of the assembly. Multiple formats can be supplied and the Assembly Plugin will generate an archive for each desired formats. When deploying your project, all file formats specified will also be deployed. A format is specified by supplying one of the following values in a &lt;format&gt; subelement:
-	dir - Creates a directory
-	zip - Creates a ZIP file format
-	tar - Creates a TAR format
-	tar.gz - Creates a gzip&apos;d TAR format
-	tar.bz2 - Creates a bzip&apos;d TAR format
</description>
        </parameter>
        <parameter>
          <name>ignoreDirFormatExtensions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, the &apos;.dir&apos; suffix will be suppressed in the output directory name when using assembly/format == &apos;dir&apos; and other formats that begin with &apos;dir&apos;.
NOTE: Since 2.2-beta-3, the default-value for this is true, NOT false as it used to be.</description>
        </parameter>
        <parameter>
          <name>ignoreMissingDescriptor</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to not fail when a descriptor is missing.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to avoid all chmod calls.

NOTE: This will cause the assembly plugin to DISREGARD all fileMode/directoryMode settings in the assembly descriptor, and all file permissions in unpacked dependencies!
</description>
        </parameter>
        <parameter>
          <name>includeSite</name>
          <type>boolean</type>
          <deprecated>Please set this variable in the assembly descriptor instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true to include the site generated by site:site goal.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>recompressZippedFiles</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if zip archives (jar,zip etc) being added to the assembly should be compressed again. Compressing again can result in smaller archive size, but gives noticeably longer execution time.</description>
        </parameter>
        <parameter>
          <name>runOnlyAtExecutionRoot</name>
          <type>boolean</type>
          <since>2.2-beta-4</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to run only at the top of a given module tree. That is, run in the project contained in the same folder where the mvn execution was launched.</description>
        </parameter>
        <parameter>
          <name>skipAssembly</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag allowing one or more executions of the assembly plugin to be configured as skipped for a particular build. This makes the assembly plugin more controllable from profiles.</description>
        </parameter>
        <parameter>
          <name>tarLongFileMode</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the TarArchiver behavior on file paths with more than 100 characters length. Valid values are: &apos;warn&apos; (default), &apos;fail&apos;, &apos;truncate&apos;, &apos;gnu&apos;, or &apos;omit&apos;.</description>
        </parameter>
        <parameter>
          <name>updateOnly</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to only update an existing archive, if it exists.
Note: The property that can be used on the command line was misspelled as &apos;assembly.updatOnly&apos; in versions prior to version 2.4.
</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
</description>
        </parameter>
        <parameter>
          <name>workDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory to unpack JARs into if needed</description>
        </parameter>
      </parameters>
      <configuration>
        <appendAssemblyId implementation="boolean" default-value="true">${assembly.appendAssemblyId}</appendAssemblyId>
        <attach implementation="boolean" default-value="true">${assembly.attach}</attach>
        <classifier implementation="java.lang.String">${classifier}</classifier>
        <descriptor implementation="java.lang.String">${descriptor}</descriptor>
        <descriptorId implementation="java.lang.String">${descriptorId}</descriptorId>
        <dryRun implementation="boolean" default-value="false">${assembly.dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${assembly.escapeString}</escapeString>
        <executedProject implementation="org.apache.maven.project.MavenProject">${executedProject}</executedProject>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <ignoreDirFormatExtensions implementation="boolean" default-value="true"/>
        <ignoreMissingDescriptor implementation="boolean" default-value="false">${assembly.ignoreMissingDescriptor}</ignoreMissingDescriptor>
        <ignorePermissions implementation="boolean" default-value="false">${assembly.ignorePermissions}</ignorePermissions>
        <includeSite implementation="boolean" default-value="false">${includeSite}</includeSite>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <recompressZippedFiles implementation="boolean" default-value="true"/>
        <runOnlyAtExecutionRoot implementation="boolean" default-value="false">${assembly.runOnlyAtExecutionRoot}</runOnlyAtExecutionRoot>
        <skipAssembly implementation="boolean" default-value="false">${assembly.skipAssembly}</skipAssembly>
        <tarLongFileMode implementation="java.lang.String" default-value="warn">${assembly.tarLongFileMode}</tarLongFileMode>
        <updateOnly implementation="boolean" default-value="false">${assembly.updateOnly}</updateOnly>
        <useJvmChmod implementation="boolean" default-value="false">${assembly.useJvmChmod}</useJvmChmod>
        <workDirectory implementation="java.io.File" default-value="${project.build.directory}/assembly/work"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>attached</goal>
      <description>Assemble an application bundle or distribution from an assembly descriptor, WITHOUT first forcing Maven to build all POMs to the package phase (as is required by the assembly:assembly goal).
NOTE: This goal should ONLY be run from the command line, and if building a multimodule project it should be used from the root POM. Use the assembly:single goal for binding your assembly to the lifecycle.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>false</inheritedByDefault>
      <implementation>org.apache.maven.plugin.assembly.mojos.AttachedAssemblyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use assembly:single instead! The assembly:attached mojo leads to non-standard builds.</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>appendAssemblyId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to false to exclude the assembly id from the assembly final name.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is a set of instructions to the archive builder, especially for building .jar files. It enables you to specify a Manifest file for the jar, in addition to other options. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>archiveBaseDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is the base directory from which archive files are created. This base directory pre-pended to any &lt;directory&gt; specifications in the assembly descriptor. This is an optional parameter.</description>
        </parameter>
        <parameter>
          <name>archiverConfig</name>
          <type>org.codehaus.plexus.configuration.PlexusConfiguration</type>
          <since>2.2-beta-3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows additional configuration options that are specific to a particular type of archive format. This is intended to capture an XML configuration that will be used to reflectively setup the options on the archiver instance.
For instance, to direct an assembly with the &apos;ear&apos; format to use a particular deployment descriptor, you should specify the following for the archiverConfig value in your plugin configuration:

&lt;appxml&gt;${project.basedir}/somepath/app.xml&lt;/appxml&gt;
</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>2.2-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Controls whether the assembly plugin tries to attach the resulting assembly to the project.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <deprecated>Please use the Assembly&apos;s id for classifier instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This is the artifact classifier to be used for the resultant assembly artifact. Normally, you would use the assembly-id instead of specifying this here.</description>
        </parameter>
        <parameter>
          <name>descriptor</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptors instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Assembly XML Descriptor file. This must be the path to your customized descriptor file.</description>
        </parameter>
        <parameter>
          <name>descriptorId</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptorRefs instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Predefined Assembly Descriptor Id&apos;s. You can select bin, jar-with-dependencies, or src.</description>
        </parameter>
        <parameter>
          <name>descriptorRefs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of references to assembly descriptors available on the plugin&apos;s classpath. The default classpath includes these built-in descriptors: bin, jar-with-dependencies, src, and project. You can add others by adding dependencies to the plugin.</description>
        </parameter>
        <parameter>
          <name>descriptors</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of descriptor files to generate from.</description>
        </parameter>
        <parameter>
          <name>descriptorSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to scan for descriptor files in. NOTE: This may not work correctly with assembly components.</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, everything up to the call to Archiver.createArchive() will be executed.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expressions preceded with this String won&apos;t be interpolated. If you use &apos;\&apos; as the escape string then \${foo} will be replaced with ${foo}.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties, project properties, and filter properties files specified in the POM build/filters section, which should be used for the filtering during the current mojo execution.
Normally, these will be configured from a plugin&apos;s execution section, to provide a different set of filters for a particular execution.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The filename of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>formats</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the formats of the assembly. Multiple formats can be supplied and the Assembly Plugin will generate an archive for each desired formats. When deploying your project, all file formats specified will also be deployed. A format is specified by supplying one of the following values in a &lt;format&gt; subelement:
-	dir - Creates a directory
-	zip - Creates a ZIP file format
-	tar - Creates a TAR format
-	tar.gz - Creates a gzip&apos;d TAR format
-	tar.bz2 - Creates a bzip&apos;d TAR format
</description>
        </parameter>
        <parameter>
          <name>ignoreDirFormatExtensions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, the &apos;.dir&apos; suffix will be suppressed in the output directory name when using assembly/format == &apos;dir&apos; and other formats that begin with &apos;dir&apos;.
NOTE: Since 2.2-beta-3, the default-value for this is true, NOT false as it used to be.</description>
        </parameter>
        <parameter>
          <name>ignoreMissingDescriptor</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to not fail when a descriptor is missing.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to avoid all chmod calls.

NOTE: This will cause the assembly plugin to DISREGARD all fileMode/directoryMode settings in the assembly descriptor, and all file permissions in unpacked dependencies!
</description>
        </parameter>
        <parameter>
          <name>includeSite</name>
          <type>boolean</type>
          <deprecated>Please set this variable in the assembly descriptor instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true to include the site generated by site:site goal.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>recompressZippedFiles</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if zip archives (jar,zip etc) being added to the assembly should be compressed again. Compressing again can result in smaller archive size, but gives noticeably longer execution time.</description>
        </parameter>
        <parameter>
          <name>runOnlyAtExecutionRoot</name>
          <type>boolean</type>
          <since>2.2-beta-4</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to run only at the top of a given module tree. That is, run in the project contained in the same folder where the mvn execution was launched.</description>
        </parameter>
        <parameter>
          <name>skipAssembly</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag allowing one or more executions of the assembly plugin to be configured as skipped for a particular build. This makes the assembly plugin more controllable from profiles.</description>
        </parameter>
        <parameter>
          <name>tarLongFileMode</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the TarArchiver behavior on file paths with more than 100 characters length. Valid values are: &apos;warn&apos; (default), &apos;fail&apos;, &apos;truncate&apos;, &apos;gnu&apos;, or &apos;omit&apos;.</description>
        </parameter>
        <parameter>
          <name>updateOnly</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to only update an existing archive, if it exists.
Note: The property that can be used on the command line was misspelled as &apos;assembly.updatOnly&apos; in versions prior to version 2.4.
</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
</description>
        </parameter>
        <parameter>
          <name>workDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory to unpack JARs into if needed</description>
        </parameter>
      </parameters>
      <configuration>
        <appendAssemblyId implementation="boolean" default-value="true">${assembly.appendAssemblyId}</appendAssemblyId>
        <attach implementation="boolean" default-value="true">${assembly.attach}</attach>
        <classifier implementation="java.lang.String">${classifier}</classifier>
        <descriptor implementation="java.lang.String">${descriptor}</descriptor>
        <descriptorId implementation="java.lang.String">${descriptorId}</descriptorId>
        <dryRun implementation="boolean" default-value="false">${assembly.dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${assembly.escapeString}</escapeString>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <ignoreDirFormatExtensions implementation="boolean" default-value="true"/>
        <ignoreMissingDescriptor implementation="boolean" default-value="false">${assembly.ignoreMissingDescriptor}</ignoreMissingDescriptor>
        <ignorePermissions implementation="boolean" default-value="false">${assembly.ignorePermissions}</ignorePermissions>
        <includeSite implementation="boolean" default-value="false">${includeSite}</includeSite>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <recompressZippedFiles implementation="boolean" default-value="true"/>
        <runOnlyAtExecutionRoot implementation="boolean" default-value="false">${assembly.runOnlyAtExecutionRoot}</runOnlyAtExecutionRoot>
        <skipAssembly implementation="boolean" default-value="false">${assembly.skipAssembly}</skipAssembly>
        <tarLongFileMode implementation="java.lang.String" default-value="warn">${assembly.tarLongFileMode}</tarLongFileMode>
        <updateOnly implementation="boolean" default-value="false">${assembly.updateOnly}</updateOnly>
        <useJvmChmod implementation="boolean" default-value="false">${assembly.useJvmChmod}</useJvmChmod>
        <workDirectory implementation="java.io.File" default-value="${project.build.directory}/assembly/work"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>directory</goal>
      <description>Like the assembly:attached goal, assemble an application bundle or distribution using an assembly descriptor from the command line. This goal will force Maven to build all included POMs up to the package phase BEFORE the assembly is processed. This goal differs from assembly:assembly in that it ignores the &lt;formats/&gt; section of the assembly descriptor, and forces the assembly to be created as a directory in the project&apos;s build-output directory (usually ./target).
This goal is also functionally equivalent to using the assembly:assembly goal in conjunction with the dir assembly format.
NOTE: This goal should ONLY be run from the command line, and if building a multimodule project it should be used from the root POM. Use the assembly:directory-single goal for binding your assembly to the lifecycle.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>false</inheritedByDefault>
      <executePhase>package</executePhase>
      <implementation>org.apache.maven.plugin.assembly.mojos.DirectoryMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use assembly:single and an assembly with format == dir instead! This mojo is redundant.</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>appendAssemblyId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to false to exclude the assembly id from the assembly final name.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is a set of instructions to the archive builder, especially for building .jar files. It enables you to specify a Manifest file for the jar, in addition to other options. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>archiveBaseDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is the base directory from which archive files are created. This base directory pre-pended to any &lt;directory&gt; specifications in the assembly descriptor. This is an optional parameter.</description>
        </parameter>
        <parameter>
          <name>archiverConfig</name>
          <type>org.codehaus.plexus.configuration.PlexusConfiguration</type>
          <since>2.2-beta-3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows additional configuration options that are specific to a particular type of archive format. This is intended to capture an XML configuration that will be used to reflectively setup the options on the archiver instance.
For instance, to direct an assembly with the &apos;ear&apos; format to use a particular deployment descriptor, you should specify the following for the archiverConfig value in your plugin configuration:

&lt;appxml&gt;${project.basedir}/somepath/app.xml&lt;/appxml&gt;
</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>2.2-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Controls whether the assembly plugin tries to attach the resulting assembly to the project.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <deprecated>Please use the Assembly&apos;s id for classifier instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This is the artifact classifier to be used for the resultant assembly artifact. Normally, you would use the assembly-id instead of specifying this here.</description>
        </parameter>
        <parameter>
          <name>descriptor</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptors instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Assembly XML Descriptor file. This must be the path to your customized descriptor file.</description>
        </parameter>
        <parameter>
          <name>descriptorId</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptorRefs instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Predefined Assembly Descriptor Id&apos;s. You can select bin, jar-with-dependencies, or src.</description>
        </parameter>
        <parameter>
          <name>descriptorRefs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of references to assembly descriptors available on the plugin&apos;s classpath. The default classpath includes these built-in descriptors: bin, jar-with-dependencies, src, and project. You can add others by adding dependencies to the plugin.</description>
        </parameter>
        <parameter>
          <name>descriptors</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of descriptor files to generate from.</description>
        </parameter>
        <parameter>
          <name>descriptorSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to scan for descriptor files in. NOTE: This may not work correctly with assembly components.</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, everything up to the call to Archiver.createArchive() will be executed.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expressions preceded with this String won&apos;t be interpolated. If you use &apos;\&apos; as the escape string then \${foo} will be replaced with ${foo}.</description>
        </parameter>
        <parameter>
          <name>executedProject</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>false</required>
          <editable>true</editable>
          <description>Get the executed project from the forked lifecycle.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties, project properties, and filter properties files specified in the POM build/filters section, which should be used for the filtering during the current mojo execution.
Normally, these will be configured from a plugin&apos;s execution section, to provide a different set of filters for a particular execution.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The filename of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>formats</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the formats of the assembly. Multiple formats can be supplied and the Assembly Plugin will generate an archive for each desired formats. When deploying your project, all file formats specified will also be deployed. A format is specified by supplying one of the following values in a &lt;format&gt; subelement:
-	dir - Creates a directory
-	zip - Creates a ZIP file format
-	tar - Creates a TAR format
-	tar.gz - Creates a gzip&apos;d TAR format
-	tar.bz2 - Creates a bzip&apos;d TAR format
</description>
        </parameter>
        <parameter>
          <name>ignoreDirFormatExtensions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, the &apos;.dir&apos; suffix will be suppressed in the output directory name when using assembly/format == &apos;dir&apos; and other formats that begin with &apos;dir&apos;.
NOTE: Since 2.2-beta-3, the default-value for this is true, NOT false as it used to be.</description>
        </parameter>
        <parameter>
          <name>ignoreMissingDescriptor</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to not fail when a descriptor is missing.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to avoid all chmod calls.

NOTE: This will cause the assembly plugin to DISREGARD all fileMode/directoryMode settings in the assembly descriptor, and all file permissions in unpacked dependencies!
</description>
        </parameter>
        <parameter>
          <name>includeSite</name>
          <type>boolean</type>
          <deprecated>Please set this variable in the assembly descriptor instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true to include the site generated by site:site goal.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>recompressZippedFiles</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if zip archives (jar,zip etc) being added to the assembly should be compressed again. Compressing again can result in smaller archive size, but gives noticeably longer execution time.</description>
        </parameter>
        <parameter>
          <name>runOnlyAtExecutionRoot</name>
          <type>boolean</type>
          <since>2.2-beta-4</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to run only at the top of a given module tree. That is, run in the project contained in the same folder where the mvn execution was launched.</description>
        </parameter>
        <parameter>
          <name>skipAssembly</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag allowing one or more executions of the assembly plugin to be configured as skipped for a particular build. This makes the assembly plugin more controllable from profiles.</description>
        </parameter>
        <parameter>
          <name>tarLongFileMode</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the TarArchiver behavior on file paths with more than 100 characters length. Valid values are: &apos;warn&apos; (default), &apos;fail&apos;, &apos;truncate&apos;, &apos;gnu&apos;, or &apos;omit&apos;.</description>
        </parameter>
        <parameter>
          <name>updateOnly</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to only update an existing archive, if it exists.
Note: The property that can be used on the command line was misspelled as &apos;assembly.updatOnly&apos; in versions prior to version 2.4.
</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
</description>
        </parameter>
        <parameter>
          <name>workDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory to unpack JARs into if needed</description>
        </parameter>
      </parameters>
      <configuration>
        <appendAssemblyId implementation="boolean" default-value="true">${assembly.appendAssemblyId}</appendAssemblyId>
        <attach implementation="boolean" default-value="true">${assembly.attach}</attach>
        <classifier implementation="java.lang.String">${classifier}</classifier>
        <descriptor implementation="java.lang.String">${descriptor}</descriptor>
        <descriptorId implementation="java.lang.String">${descriptorId}</descriptorId>
        <dryRun implementation="boolean" default-value="false">${assembly.dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${assembly.escapeString}</escapeString>
        <executedProject implementation="org.apache.maven.project.MavenProject">${executedProject}</executedProject>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <ignoreDirFormatExtensions implementation="boolean" default-value="true"/>
        <ignoreMissingDescriptor implementation="boolean" default-value="false">${assembly.ignoreMissingDescriptor}</ignoreMissingDescriptor>
        <ignorePermissions implementation="boolean" default-value="false">${assembly.ignorePermissions}</ignorePermissions>
        <includeSite implementation="boolean" default-value="false">${includeSite}</includeSite>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <recompressZippedFiles implementation="boolean" default-value="true"/>
        <runOnlyAtExecutionRoot implementation="boolean" default-value="false">${assembly.runOnlyAtExecutionRoot}</runOnlyAtExecutionRoot>
        <skipAssembly implementation="boolean" default-value="false">${assembly.skipAssembly}</skipAssembly>
        <tarLongFileMode implementation="java.lang.String" default-value="warn">${assembly.tarLongFileMode}</tarLongFileMode>
        <updateOnly implementation="boolean" default-value="false">${assembly.updateOnly}</updateOnly>
        <useJvmChmod implementation="boolean" default-value="false">${assembly.useJvmChmod}</useJvmChmod>
        <workDirectory implementation="java.io.File" default-value="${project.build.directory}/assembly/work"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>directory-inline</goal>
      <description>Like the assembly:attached goal, assemble an application bundle or distribution from an assembly descriptor, WITHOUT first forcing Maven to build all POMs to the package phase (as is required by the assembly:assembly goal). This goal differs from assembly:attached in that it ignores the &lt;formats/&gt; section of the assembly descriptor, and forces the assembly to be created as a directory in the project&apos;s build-output directory (usually ./target).
This goal is also functionally equivalent to using the assembly:attached goal in conjunction with the dir assembly format.
NOTE: This goal should ONLY be run from the command line, and if building a multimodule project it should be used from the root POM. Use the assembly:directory-single goal for binding your assembly to the lifecycle.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>false</inheritedByDefault>
      <implementation>org.apache.maven.plugin.assembly.mojos.DirectoryInlineMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use assembly:single and an assembly with format == dir instead! This mojo is redundant, and leads to
            non-standard builds.</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>appendAssemblyId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to false to exclude the assembly id from the assembly final name.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is a set of instructions to the archive builder, especially for building .jar files. It enables you to specify a Manifest file for the jar, in addition to other options. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>archiveBaseDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is the base directory from which archive files are created. This base directory pre-pended to any &lt;directory&gt; specifications in the assembly descriptor. This is an optional parameter.</description>
        </parameter>
        <parameter>
          <name>archiverConfig</name>
          <type>org.codehaus.plexus.configuration.PlexusConfiguration</type>
          <since>2.2-beta-3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows additional configuration options that are specific to a particular type of archive format. This is intended to capture an XML configuration that will be used to reflectively setup the options on the archiver instance.
For instance, to direct an assembly with the &apos;ear&apos; format to use a particular deployment descriptor, you should specify the following for the archiverConfig value in your plugin configuration:

&lt;appxml&gt;${project.basedir}/somepath/app.xml&lt;/appxml&gt;
</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>2.2-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Controls whether the assembly plugin tries to attach the resulting assembly to the project.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <deprecated>Please use the Assembly&apos;s id for classifier instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This is the artifact classifier to be used for the resultant assembly artifact. Normally, you would use the assembly-id instead of specifying this here.</description>
        </parameter>
        <parameter>
          <name>descriptor</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptors instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Assembly XML Descriptor file. This must be the path to your customized descriptor file.</description>
        </parameter>
        <parameter>
          <name>descriptorId</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptorRefs instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Predefined Assembly Descriptor Id&apos;s. You can select bin, jar-with-dependencies, or src.</description>
        </parameter>
        <parameter>
          <name>descriptorRefs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of references to assembly descriptors available on the plugin&apos;s classpath. The default classpath includes these built-in descriptors: bin, jar-with-dependencies, src, and project. You can add others by adding dependencies to the plugin.</description>
        </parameter>
        <parameter>
          <name>descriptors</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of descriptor files to generate from.</description>
        </parameter>
        <parameter>
          <name>descriptorSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to scan for descriptor files in. NOTE: This may not work correctly with assembly components.</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, everything up to the call to Archiver.createArchive() will be executed.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expressions preceded with this String won&apos;t be interpolated. If you use &apos;\&apos; as the escape string then \${foo} will be replaced with ${foo}.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties, project properties, and filter properties files specified in the POM build/filters section, which should be used for the filtering during the current mojo execution.
Normally, these will be configured from a plugin&apos;s execution section, to provide a different set of filters for a particular execution.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The filename of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>formats</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the formats of the assembly. Multiple formats can be supplied and the Assembly Plugin will generate an archive for each desired formats. When deploying your project, all file formats specified will also be deployed. A format is specified by supplying one of the following values in a &lt;format&gt; subelement:
-	dir - Creates a directory
-	zip - Creates a ZIP file format
-	tar - Creates a TAR format
-	tar.gz - Creates a gzip&apos;d TAR format
-	tar.bz2 - Creates a bzip&apos;d TAR format
</description>
        </parameter>
        <parameter>
          <name>ignoreDirFormatExtensions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, the &apos;.dir&apos; suffix will be suppressed in the output directory name when using assembly/format == &apos;dir&apos; and other formats that begin with &apos;dir&apos;.
NOTE: Since 2.2-beta-3, the default-value for this is true, NOT false as it used to be.</description>
        </parameter>
        <parameter>
          <name>ignoreMissingDescriptor</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to not fail when a descriptor is missing.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to avoid all chmod calls.

NOTE: This will cause the assembly plugin to DISREGARD all fileMode/directoryMode settings in the assembly descriptor, and all file permissions in unpacked dependencies!
</description>
        </parameter>
        <parameter>
          <name>includeSite</name>
          <type>boolean</type>
          <deprecated>Please set this variable in the assembly descriptor instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true to include the site generated by site:site goal.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>recompressZippedFiles</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if zip archives (jar,zip etc) being added to the assembly should be compressed again. Compressing again can result in smaller archive size, but gives noticeably longer execution time.</description>
        </parameter>
        <parameter>
          <name>runOnlyAtExecutionRoot</name>
          <type>boolean</type>
          <since>2.2-beta-4</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to run only at the top of a given module tree. That is, run in the project contained in the same folder where the mvn execution was launched.</description>
        </parameter>
        <parameter>
          <name>skipAssembly</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag allowing one or more executions of the assembly plugin to be configured as skipped for a particular build. This makes the assembly plugin more controllable from profiles.</description>
        </parameter>
        <parameter>
          <name>tarLongFileMode</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the TarArchiver behavior on file paths with more than 100 characters length. Valid values are: &apos;warn&apos; (default), &apos;fail&apos;, &apos;truncate&apos;, &apos;gnu&apos;, or &apos;omit&apos;.</description>
        </parameter>
        <parameter>
          <name>updateOnly</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to only update an existing archive, if it exists.
Note: The property that can be used on the command line was misspelled as &apos;assembly.updatOnly&apos; in versions prior to version 2.4.
</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
</description>
        </parameter>
        <parameter>
          <name>workDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory to unpack JARs into if needed</description>
        </parameter>
      </parameters>
      <configuration>
        <appendAssemblyId implementation="boolean" default-value="true">${assembly.appendAssemblyId}</appendAssemblyId>
        <attach implementation="boolean" default-value="true">${assembly.attach}</attach>
        <classifier implementation="java.lang.String">${classifier}</classifier>
        <descriptor implementation="java.lang.String">${descriptor}</descriptor>
        <descriptorId implementation="java.lang.String">${descriptorId}</descriptorId>
        <dryRun implementation="boolean" default-value="false">${assembly.dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${assembly.escapeString}</escapeString>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <ignoreDirFormatExtensions implementation="boolean" default-value="true"/>
        <ignoreMissingDescriptor implementation="boolean" default-value="false">${assembly.ignoreMissingDescriptor}</ignoreMissingDescriptor>
        <ignorePermissions implementation="boolean" default-value="false">${assembly.ignorePermissions}</ignorePermissions>
        <includeSite implementation="boolean" default-value="false">${includeSite}</includeSite>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <recompressZippedFiles implementation="boolean" default-value="true"/>
        <runOnlyAtExecutionRoot implementation="boolean" default-value="false">${assembly.runOnlyAtExecutionRoot}</runOnlyAtExecutionRoot>
        <skipAssembly implementation="boolean" default-value="false">${assembly.skipAssembly}</skipAssembly>
        <tarLongFileMode implementation="java.lang.String" default-value="warn">${assembly.tarLongFileMode}</tarLongFileMode>
        <updateOnly implementation="boolean" default-value="false">${assembly.updateOnly}</updateOnly>
        <useJvmChmod implementation="boolean" default-value="false">${assembly.useJvmChmod}</useJvmChmod>
        <workDirectory implementation="java.io.File" default-value="${project.build.directory}/assembly/work"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>directory-single</goal>
      <description>Like the assembly:attached goal, assemble an application bundle or distribution from an assembly descriptor. This goal is suitable either for binding to the lifecycle or calling directly from the command line (provided all required files are available before the build starts, or are produced by another goal specified before this one on the command line).
This goal differs from assembly:single in that it ignores the &lt;formats/&gt; section of the assembly descriptor, and forces the assembly to be created as a directory in the project&apos;s build-output directory (usually ./target).</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>false</inheritedByDefault>
      <implementation>org.apache.maven.plugin.assembly.mojos.DirectorySingleMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use assembly:single and an assembly with format == dir instead! This mojo is redundant.</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>appendAssemblyId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to false to exclude the assembly id from the assembly final name.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is a set of instructions to the archive builder, especially for building .jar files. It enables you to specify a Manifest file for the jar, in addition to other options. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>archiveBaseDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is the base directory from which archive files are created. This base directory pre-pended to any &lt;directory&gt; specifications in the assembly descriptor. This is an optional parameter.</description>
        </parameter>
        <parameter>
          <name>archiverConfig</name>
          <type>org.codehaus.plexus.configuration.PlexusConfiguration</type>
          <since>2.2-beta-3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows additional configuration options that are specific to a particular type of archive format. This is intended to capture an XML configuration that will be used to reflectively setup the options on the archiver instance.
For instance, to direct an assembly with the &apos;ear&apos; format to use a particular deployment descriptor, you should specify the following for the archiverConfig value in your plugin configuration:

&lt;appxml&gt;${project.basedir}/somepath/app.xml&lt;/appxml&gt;
</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>2.2-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Controls whether the assembly plugin tries to attach the resulting assembly to the project.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <deprecated>Please use the Assembly&apos;s id for classifier instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This is the artifact classifier to be used for the resultant assembly artifact. Normally, you would use the assembly-id instead of specifying this here.</description>
        </parameter>
        <parameter>
          <name>descriptor</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptors instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Assembly XML Descriptor file. This must be the path to your customized descriptor file.</description>
        </parameter>
        <parameter>
          <name>descriptorId</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptorRefs instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Predefined Assembly Descriptor Id&apos;s. You can select bin, jar-with-dependencies, or src.</description>
        </parameter>
        <parameter>
          <name>descriptorRefs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of references to assembly descriptors available on the plugin&apos;s classpath. The default classpath includes these built-in descriptors: bin, jar-with-dependencies, src, and project. You can add others by adding dependencies to the plugin.</description>
        </parameter>
        <parameter>
          <name>descriptors</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of descriptor files to generate from.</description>
        </parameter>
        <parameter>
          <name>descriptorSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to scan for descriptor files in. NOTE: This may not work correctly with assembly components.</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, everything up to the call to Archiver.createArchive() will be executed.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expressions preceded with this String won&apos;t be interpolated. If you use &apos;\&apos; as the escape string then \${foo} will be replaced with ${foo}.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties, project properties, and filter properties files specified in the POM build/filters section, which should be used for the filtering during the current mojo execution.
Normally, these will be configured from a plugin&apos;s execution section, to provide a different set of filters for a particular execution.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The filename of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>formats</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the formats of the assembly. Multiple formats can be supplied and the Assembly Plugin will generate an archive for each desired formats. When deploying your project, all file formats specified will also be deployed. A format is specified by supplying one of the following values in a &lt;format&gt; subelement:
-	dir - Creates a directory
-	zip - Creates a ZIP file format
-	tar - Creates a TAR format
-	tar.gz - Creates a gzip&apos;d TAR format
-	tar.bz2 - Creates a bzip&apos;d TAR format
</description>
        </parameter>
        <parameter>
          <name>ignoreDirFormatExtensions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, the &apos;.dir&apos; suffix will be suppressed in the output directory name when using assembly/format == &apos;dir&apos; and other formats that begin with &apos;dir&apos;.
NOTE: Since 2.2-beta-3, the default-value for this is true, NOT false as it used to be.</description>
        </parameter>
        <parameter>
          <name>ignoreMissingDescriptor</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to not fail when a descriptor is missing.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to avoid all chmod calls.

NOTE: This will cause the assembly plugin to DISREGARD all fileMode/directoryMode settings in the assembly descriptor, and all file permissions in unpacked dependencies!
</description>
        </parameter>
        <parameter>
          <name>includeSite</name>
          <type>boolean</type>
          <deprecated>Please set this variable in the assembly descriptor instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true to include the site generated by site:site goal.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>recompressZippedFiles</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if zip archives (jar,zip etc) being added to the assembly should be compressed again. Compressing again can result in smaller archive size, but gives noticeably longer execution time.</description>
        </parameter>
        <parameter>
          <name>runOnlyAtExecutionRoot</name>
          <type>boolean</type>
          <since>2.2-beta-4</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to run only at the top of a given module tree. That is, run in the project contained in the same folder where the mvn execution was launched.</description>
        </parameter>
        <parameter>
          <name>skipAssembly</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag allowing one or more executions of the assembly plugin to be configured as skipped for a particular build. This makes the assembly plugin more controllable from profiles.</description>
        </parameter>
        <parameter>
          <name>tarLongFileMode</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the TarArchiver behavior on file paths with more than 100 characters length. Valid values are: &apos;warn&apos; (default), &apos;fail&apos;, &apos;truncate&apos;, &apos;gnu&apos;, or &apos;omit&apos;.</description>
        </parameter>
        <parameter>
          <name>updateOnly</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to only update an existing archive, if it exists.
Note: The property that can be used on the command line was misspelled as &apos;assembly.updatOnly&apos; in versions prior to version 2.4.
</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
</description>
        </parameter>
        <parameter>
          <name>workDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory to unpack JARs into if needed</description>
        </parameter>
      </parameters>
      <configuration>
        <appendAssemblyId implementation="boolean" default-value="true">${assembly.appendAssemblyId}</appendAssemblyId>
        <attach implementation="boolean" default-value="true">${assembly.attach}</attach>
        <classifier implementation="java.lang.String">${classifier}</classifier>
        <descriptor implementation="java.lang.String">${descriptor}</descriptor>
        <descriptorId implementation="java.lang.String">${descriptorId}</descriptorId>
        <dryRun implementation="boolean" default-value="false">${assembly.dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${assembly.escapeString}</escapeString>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <ignoreDirFormatExtensions implementation="boolean" default-value="true"/>
        <ignoreMissingDescriptor implementation="boolean" default-value="false">${assembly.ignoreMissingDescriptor}</ignoreMissingDescriptor>
        <ignorePermissions implementation="boolean" default-value="false">${assembly.ignorePermissions}</ignorePermissions>
        <includeSite implementation="boolean" default-value="false">${includeSite}</includeSite>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <recompressZippedFiles implementation="boolean" default-value="true"/>
        <runOnlyAtExecutionRoot implementation="boolean" default-value="false">${assembly.runOnlyAtExecutionRoot}</runOnlyAtExecutionRoot>
        <skipAssembly implementation="boolean" default-value="false">${assembly.skipAssembly}</skipAssembly>
        <tarLongFileMode implementation="java.lang.String" default-value="warn">${assembly.tarLongFileMode}</tarLongFileMode>
        <updateOnly implementation="boolean" default-value="false">${assembly.updateOnly}</updateOnly>
        <useJvmChmod implementation="boolean" default-value="false">${assembly.useJvmChmod}</useJvmChmod>
        <workDirectory implementation="java.io.File" default-value="${project.build.directory}/assembly/work"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on maven-assembly-plugin.
Call mvn assembly:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugin.assembly.mojos.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>single</goal>
      <description>Assemble an application bundle or distribution from an assembly descriptor. This goal is suitable either for binding to the lifecycle or calling directly from the command line (provided all required files are available before the build starts, or are produced by another goal specified before this one on the command line).</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>false</inheritedByDefault>
      <implementation>org.apache.maven.plugin.assembly.mojos.SingleAssemblyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendAssemblyId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to false to exclude the assembly id from the assembly final name.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is a set of instructions to the archive builder, especially for building .jar files. It enables you to specify a Manifest file for the jar, in addition to other options. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>archiveBaseDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This is the base directory from which archive files are created. This base directory pre-pended to any &lt;directory&gt; specifications in the assembly descriptor. This is an optional parameter.</description>
        </parameter>
        <parameter>
          <name>archiverConfig</name>
          <type>org.codehaus.plexus.configuration.PlexusConfiguration</type>
          <since>2.2-beta-3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows additional configuration options that are specific to a particular type of archive format. This is intended to capture an XML configuration that will be used to reflectively setup the options on the archiver instance.
For instance, to direct an assembly with the &apos;ear&apos; format to use a particular deployment descriptor, you should specify the following for the archiverConfig value in your plugin configuration:

&lt;appxml&gt;${project.basedir}/somepath/app.xml&lt;/appxml&gt;
</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>2.2-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Controls whether the assembly plugin tries to attach the resulting assembly to the project.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <deprecated>Please use the Assembly&apos;s id for classifier instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This is the artifact classifier to be used for the resultant assembly artifact. Normally, you would use the assembly-id instead of specifying this here.</description>
        </parameter>
        <parameter>
          <name>descriptor</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptors instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Assembly XML Descriptor file. This must be the path to your customized descriptor file.</description>
        </parameter>
        <parameter>
          <name>descriptorId</name>
          <type>java.lang.String</type>
          <deprecated>Please use descriptorRefs instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Predefined Assembly Descriptor Id&apos;s. You can select bin, jar-with-dependencies, or src.</description>
        </parameter>
        <parameter>
          <name>descriptorRefs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of references to assembly descriptors available on the plugin&apos;s classpath. The default classpath includes these built-in descriptors: bin, jar-with-dependencies, src, and project. You can add others by adding dependencies to the plugin.</description>
        </parameter>
        <parameter>
          <name>descriptors</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of descriptor files to generate from.</description>
        </parameter>
        <parameter>
          <name>descriptorSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to scan for descriptor files in. NOTE: This may not work correctly with assembly components.</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, everything up to the call to Archiver.createArchive() will be executed.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expressions preceded with this String won&apos;t be interpolated. If you use &apos;\&apos; as the escape string then \${foo} will be replaced with ${foo}.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties, project properties, and filter properties files specified in the POM build/filters section, which should be used for the filtering during the current mojo execution.
Normally, these will be configured from a plugin&apos;s execution section, to provide a different set of filters for a particular execution.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The filename of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>formats</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the formats of the assembly. Multiple formats can be supplied and the Assembly Plugin will generate an archive for each desired formats. When deploying your project, all file formats specified will also be deployed. A format is specified by supplying one of the following values in a &lt;format&gt; subelement:
-	dir - Creates a directory
-	zip - Creates a ZIP file format
-	tar - Creates a TAR format
-	tar.gz - Creates a gzip&apos;d TAR format
-	tar.bz2 - Creates a bzip&apos;d TAR format
</description>
        </parameter>
        <parameter>
          <name>ignoreDirFormatExtensions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this flag is set, the &apos;.dir&apos; suffix will be suppressed in the output directory name when using assembly/format == &apos;dir&apos; and other formats that begin with &apos;dir&apos;.
NOTE: Since 2.2-beta-3, the default-value for this is true, NOT false as it used to be.</description>
        </parameter>
        <parameter>
          <name>ignoreMissingDescriptor</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to not fail when a descriptor is missing.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true in order to avoid all chmod calls.

NOTE: This will cause the assembly plugin to DISREGARD all fileMode/directoryMode settings in the assembly descriptor, and all file permissions in unpacked dependencies!
</description>
        </parameter>
        <parameter>
          <name>includeSite</name>
          <type>boolean</type>
          <deprecated>Please set this variable in the assembly descriptor instead</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Set to true to include the site generated by site:site goal.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory of the assembled distribution file.</description>
        </parameter>
        <parameter>
          <name>recompressZippedFiles</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if zip archives (jar,zip etc) being added to the assembly should be compressed again. Compressing again can result in smaller archive size, but gives noticeably longer execution time.</description>
        </parameter>
        <parameter>
          <name>runOnlyAtExecutionRoot</name>
          <type>boolean</type>
          <since>2.2-beta-4</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to run only at the top of a given module tree. That is, run in the project contained in the same folder where the mvn execution was launched.</description>
        </parameter>
        <parameter>
          <name>skipAssembly</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag allowing one or more executions of the assembly plugin to be configured as skipped for a particular build. This makes the assembly plugin more controllable from profiles.</description>
        </parameter>
        <parameter>
          <name>tarLongFileMode</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the TarArchiver behavior on file paths with more than 100 characters length. Valid values are: &apos;warn&apos; (default), &apos;fail&apos;, &apos;truncate&apos;, &apos;gnu&apos;, or &apos;omit&apos;.</description>
        </parameter>
        <parameter>
          <name>updateOnly</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This will cause the assembly to only update an existing archive, if it exists.
Note: The property that can be used on the command line was misspelled as &apos;assembly.updatOnly&apos; in versions prior to version 2.4.
</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
</description>
        </parameter>
        <parameter>
          <name>workDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory to unpack JARs into if needed</description>
        </parameter>
      </parameters>
      <configuration>
        <appendAssemblyId implementation="boolean" default-value="true">${assembly.appendAssemblyId}</appendAssemblyId>
        <attach implementation="boolean" default-value="true">${assembly.attach}</attach>
        <classifier implementation="java.lang.String">${classifier}</classifier>
        <descriptor implementation="java.lang.String">${descriptor}</descriptor>
        <descriptorId implementation="java.lang.String">${descriptorId}</descriptorId>
        <dryRun implementation="boolean" default-value="false">${assembly.dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${assembly.escapeString}</escapeString>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <ignoreDirFormatExtensions implementation="boolean" default-value="true"/>
        <ignoreMissingDescriptor implementation="boolean" default-value="false">${assembly.ignoreMissingDescriptor}</ignoreMissingDescriptor>
        <ignorePermissions implementation="boolean" default-value="false">${assembly.ignorePermissions}</ignorePermissions>
        <includeSite implementation="boolean" default-value="false">${includeSite}</includeSite>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <recompressZippedFiles implementation="boolean" default-value="true"/>
        <runOnlyAtExecutionRoot implementation="boolean" default-value="false">${assembly.runOnlyAtExecutionRoot}</runOnlyAtExecutionRoot>
        <skipAssembly implementation="boolean" default-value="false">${assembly.skipAssembly}</skipAssembly>
        <tarLongFileMode implementation="java.lang.String" default-value="warn">${assembly.tarLongFileMode}</tarLongFileMode>
        <updateOnly implementation="boolean" default-value="false">${assembly.updateOnly}</updateOnly>
        <useJvmChmod implementation="boolean" default-value="false">${assembly.useJvmChmod}</useJvmChmod>
        <workDirectory implementation="java.io.File" default-value="${project.build.directory}/assembly/work"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>unpack</goal>
      <description>Unpack project dependencies. Currently supports dependencies of type jar and zip.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>false</inheritedByDefault>
      <implementation>org.apache.maven.plugin.assembly.mojos.UnpackMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use org.apache.maven.plugins:maven-dependency-plugin goal: unpack or unpack-dependencies instead.</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>workDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory to unpack JARs into if needed</description>
        </parameter>
      </parameters>
      <configuration>
        <workDirectory implementation="java.io.File" default-value="${project.build.directory}/assembly/work"/>
      </configuration>
    </mojo>
  </mojos>
</plugin>